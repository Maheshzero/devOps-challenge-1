pipeline {
    agent any

    environment {
        // Use Jenkins credentials securely; DO NOT hardcode username/password
        DOCKERHUB_CREDENTIALS = credentials('mahesh-dockerhub')  // Jenkins credential ID
        IMAGE_NAME = 'maheshzero/maheshzero-flask'               // DockerHub repository
        IMAGE_TAG = 'latest'
        WORKDIR = 'C:/Users/mahes/OneDrive/Desktop/dockder/devOps-challenge-1/submissions/Maheshzero'
    }

    stages {
        stage('Build Stage') {
            steps {
                echo "Stage 1: Building Docker image"
                dir("${WORKDIR}") {
                    bat "docker build -t ${IMAGE_NAME}:${IMAGE_TAG} ."
                    echo "Docker image built successfully: ${IMAGE_NAME}:${IMAGE_TAG}"
                }
            }
        }

        stage('Test Stage') {
            steps {
                echo "Stage 2: Running tests inside Docker container"
                dir("${WORKDIR}") {
                    bat "docker run --rm ${IMAGE_NAME}:${IMAGE_TAG} pytest"
                }
            }
            post {
                failure {
                    echo "Tests failed. Pipeline will stop here."
                    error("Aborting further stages due to test failure.")
                }
            }
        }

        stage('Push Stage') {
            steps {
                echo "Stage 3: Pushing Docker image to DockerHub"
                // Use Jenkins credentials safely
                bat """
                docker login -u %DOCKERHUB_CREDENTIALS_USR% -p %DOCKERHUB_CREDENTIALS_PSW%
                docker push ${IMAGE_NAME}:${IMAGE_TAG}
                """
                echo "Docker image pushed successfully."
            }
        }

        stage('Deploy Stage') {
            steps {
                echo "Stage 4: Deploying container locally"
                // Ensure previous container is stopped to avoid port conflicts
                bat """
                docker stop $(docker ps -q --filter "ancestor=${IMAGE_NAME}:${IMAGE_TAG}") || echo 'No old container running'
                docker rm $(docker ps -aq --filter "ancestor=${IMAGE_NAME}:${IMAGE_TAG}") || echo 'No old container to remove'
                docker run -d -p 5000:5000 ${IMAGE_NAME}:${IMAGE_TAG}
                """
                echo "Container deployed locally and accessible on port 5000."
            }
        }
    }

    post {
        always {
            echo "Pipeline finished."
        }
        failure {
            echo "Pipeline failed. Check the logs above for details."
        }
        success {
            echo "Pipeline completed successfully!"
        }
    }
}
